# -*- coding: utf-8 -*-
"""O(n): Linear complexity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DABgGeL-S6okVl7bBa4Zn74Oyh9RxIpV

### Example 1: Checking Attendance in a Classroom
"""

""" Explanation

The function check_attendance takes a list of students as input.

It iterates through each student in the list, prompting the user to input whether the student is present or absent.

For each student, the function prints a message based on the user's input.

Key Points The for loop iterates over each student in the list exactly once.

The time complexity of this function is O(n), where n is the number of students in the list.

If the number of students doubles, the number of iterations (and thus the total time taken) will also double,

demonstrating linear time complexity."""

def check_attendance(students):
    for student in students:
        print(f"Is {student} present? (yes/no)")
        response = input().strip().lower()
        if response == "yes":
            print(f"{student} is marked present.")
        else:
            print(f"{student} is marked absent.")

# Example usage
students = ["Alice", "Bob", "Charlie", "David", "Eva"]
check_attendance(students)

"""### Example 2: Calculating the Sum of Elements in a List"""

"""Scenario: Calculating the Sum of Elements in a List

The task is to calculate the sum of all numbers in a list.

This involves iterating through each element in the list and adding it to a running total.

The function calculate_sum takes a list of numbers as input.

It initializes a variable total to 0.

It iterates through each number in the list, adding each number to total.

The final sum is returned after the loop completes.

"""

def calculate_sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total

# Example usage
numbers = [3, 7, 2, 5, 10]
result = calculate_sum(numbers)
print(f"The sum of the numbers is: {result}")

"""# Example 3: Simple Dice Rolling Game

In this dice game, the goal is to roll a six-sided die until we get a six. The game keeps track of the number of rolls it takes to achieve

this.
"""

import random

def count_rolls_to_get_six():
    count = 0
    while True:
        roll = random.randint(1, 6)
        count += 1
        if roll == 6:
            break
    return count

# Example usage
number_of_rolls = count_rolls_to_get_six()
print(f"It took {number_of_rolls} rolls to get a six.")

students = ["Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Hannah", "Ivy","Jack"]#O(1)

# Example usage: Accessing the fifth student's name
student_name = students[4]  # Index 4 corresponds to the fifth student
print(student_name)  # Output: Eva
def randomfunction(students):
  first = students[0] #O(1)
  total=0 #O(1)
  new_list=[] #O(1)
  for student in students:
    total+=1 #O(n)
    new_list.append(student)#O(n)
  print(new_list)#O(1)(
  return total#O(1)
print(randomfunction(students))#O(6+2n)=O(n)