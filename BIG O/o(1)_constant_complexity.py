# -*- coding: utf-8 -*-
"""O(1): Constant complexity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yPNTcQZY1qU2KljADGHy1EnXTKxhrdvO
"""

import time

time.time

timestamp1 = time.time()

"""# Order of 0(1)
The below functions runs in O(1) time (or "constant time") relative to its input. The input array could be 1 item or 1,000 items, but this function would still just require one step.
"""

#Example-1
def get_element_at_index(arr, index):
    return arr[index]

# Example usage
my_array = [10, 20, 30, 40, 50]
element = get_element_at_index(my_array, 2)
print(element)  # Output: 30

#Example-2
def add_numbers(a, b):
    return a + b

# Example usage
sum_result = add_numbers(5, 7)
print(sum_result)  # Output: 12

#Example-3
students = [
    {"id": 1, "name": "Alice"},
    {"id": 2, "name": "Bob"},
    {"id": 3, "name": "Charlie"},
    {"id": 4, "name": "David"},
    {"id": 5, "name": "Eva"}
]
def get_student_by_index(students, index):
    return students[index]
# Example usage
student = get_student_by_index(students, 2)  # Accessing the third student (index 2)
print(student)  # Output: {"id": 3, "name": "Charlie"}
#The operation students[index] is a direct access operation, which takes constant time, regardless of the number of students in the array.
#Therefore, accessing a student's information by their index is an O(1) operation.

# List of students
students = ["Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Hannah", "Ivy", "Jack"]

# Function to display the first student (O(1) operation)
def display_student(student_list):
    print(student_list[0])

# Calling the function
display_student(students)