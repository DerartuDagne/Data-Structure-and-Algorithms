# -*- coding: utf-8 -*-
"""Reverse a String using Stack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QrfCQp0_U557aA1miqQL5ihK5bF6iWTU

# Reverse a String

 The code reverses a string by leveraging the stack data structure. The Last In, First Out (LIFO) nature of stacks makes them ideal for this task, as it allows for the reversal of character order.

How It Works:

Creating and Managing the Stack:

Initialization: An empty stack is created using the createStack() function, which simply initializes an empty list.

Size Check: The size() function determines the number of elements in the stack, and the isEmpty() function checks if the stack is empty based on its size.

Push Operation: The push() function adds items (characters) to the stack, increasing its size by one.

Pop Operation: The pop() function removes items from the stack, decreasing its size by one. If the stack is empty, it does nothing.
Reversing the String:

Pushing Characters: Iterate over each character of the input string and push it onto the stack. As characters are pushed, the stack maintains the reverse order.

Popping Characters: After all characters are pushed onto the stack, the stack is emptied by popping characters one by one. Since the stackâ€™s LIFO nature means the last character pushed will be the first one popped, this process effectively reverses the order of characters.

Building the Reversed String: Each popped character is appended to a new string, which will be the reversed version of the input string.
"""

# Python program to reverse a string using stack

# Function to create an empty stack.
# It initializes size of stack as 0


def createStack():
	stack = []
	return stack

# Function to determine the size of the stack


def size(stack):
	return len(stack)

# Stack is empty if the size is 0


def isEmpty(stack):
	if size(stack) == 0:
		return true

# Function to add an item to stack .
# It increases size by 1


def push(stack, item):
	stack.append(item)

# Function to remove an item from stack.
# It decreases size by 1


def pop(stack):
	if isEmpty(stack):
		return
	return stack.pop()

# A stack based function to reverse a string

def reverse(string):
	n = len(string)

	# Create a empty stack
	stack = createStack()

	# Push all characters of string to stack
	for i in range(0, n, 1):
		push(stack, string[i])

	# Making the string empty since all
	# characters are saved in stack
	string = ""

	# Pop all characters of string and
	# put them back to string
	for i in range(0, n, 1):
		string += pop(stack)

	return string


# Driver program to test above functions
string = "ReverseString"
string = reverse(string)
print("Reversed string is " + string)