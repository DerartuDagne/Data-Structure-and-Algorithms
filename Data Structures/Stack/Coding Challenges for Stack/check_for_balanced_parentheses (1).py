# -*- coding: utf-8 -*-
"""Check for Balanced Parentheses.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12yJrbAeOI4gGAd-cGUaroXNfuxQSB1IL

# Check for Balanced Parentheses

Challenge: Determine if the parentheses in a given string are balanced using a stack.

Concept of the Code: Checking Balanced Parentheses Using a Stack
Idea: The code uses a stack data structure to determine whether the parentheses in a given string are balanced. Balanced parentheses mean that each opening parenthesis has a corresponding closing parenthesis in the correct order.

How It Works:

Initialization:

A stack is initialized to keep track of opening parentheses.
A dictionary (matching_parentheses) maps each closing parenthesis to its corresponding opening parenthesis.
Processing Each Character:

Opening Parentheses: When an opening parenthesis ('(', '{', '[') is encountered, it is pushed onto the stack. This action signifies that we expect a matching closing parenthesis later.
Closing Parentheses: When a closing parenthesis (')', '}', ']') is encountered, the code checks the stack:
If the stack is empty, it means there is no matching opening parenthesis, so the string is not balanced.
If the stack is not empty, the top element of the stack (the most recent opening parenthesis) is popped and compared with the current closing parenthesis. If they do not match, the string is not balanced.
Final Check:

After processing all characters, if the stack is empty, it means that all opening parentheses had corresponding closing parentheses in the correct order, and the string is balanced.
If the stack is not empty, it means there are unmatched opening parentheses, indicating the string is not balanced.
"""



def are_parentheses_balanced(expression):
    stack = []
    matching_parentheses = {')': '(', '}': '{', ']': '['}

    for char in expression:
        if char in matching_parentheses.values():
            stack.append(char)
        elif char in matching_parentheses.keys():
            if stack == [] or matching_parentheses[char] != stack.pop():
                return False

    return stack == []

# Usage
expression = "{[()()]}"
print(are_parentheses_balanced(expression))  # Output: True