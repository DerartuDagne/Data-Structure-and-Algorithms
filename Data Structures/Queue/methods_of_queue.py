# -*- coding: utf-8 -*-
"""Methods of Queue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AzE-Qc_xIvpXDGjf93VhL2mHQNxf2aIx

This Python code defines a Queue class that demonstrates the functionality of a circular queue using a fixed-size array. The class includes methods for basic queue operations, including enqueueing, dequeueing, displaying the queue, and inspecting the front element.

Operations:

Display: Prints the initial state of the queue.

Enqueue: Adds elements 20, 30, 40, and 50 to the queue.

Display: Shows the queue after enqueuing elements.

Full Queue Check: Attempts to add another element (60) when the queue is full.

Dequeue: Removes the first two elements from the queue.

Display: Prints the queue state after dequeuing.

Enqueue: Adds the element 60 to the queue again.

Display: Shows the updated queue.

Front Element: Displays the element at the front of the queue.
"""



class Queue:
    def __init__(self, capacity):
        self.front = 0
        self.rear = -1
        self.size = 0
        self.capacity = capacity
        self.queue = [None] * capacity

    # Function to insert an element at the rear of the queue
    def enqueue(self, data):
        # Check if the queue is full
        if self.size == self.capacity:
            print("Queue is full")
            return

        # Insert element at the rear
        self.rear = (self.rear + 1) % self.capacity
        self.queue[self.rear] = data
        self.size += 1

    # Function to delete an element from the front of the queue
    def dequeue(self):
        # If the queue is empty
        if self.size == 0:
            print("Queue is empty")
            return

        # Remove element from the front
        removed_element = self.queue[self.front]
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return removed_element

    # Function to print queue elements
    def display(self):
        if self.size == 0:
            print("Queue is Empty")
            return

        # Traverse from front to rear and print elements
        index = self.front
        for _ in range(self.size):
            print(self.queue[index], end=" <-- ")
            index = (index + 1) % self.capacity
        print()

    # Function to print the front of the queue
    def front_element(self):
        if self.size == 0:
            print("Queue is Empty")
            return
        print("Front Element is:", self.queue[self.front])

# Driver code
if __name__ == "__main__":
    # Create a queue of capacity 4
    q = Queue(4)

    # Print queue elements
    q.display()

    # Insert elements in the queue
    q.enqueue(20)
    q.enqueue(30)
    q.enqueue(40)
    q.enqueue(50)

    # Print queue elements
    q.display()

    # Attempt to insert element in the full queue
    q.enqueue(60)

    # Print queue elements
    q.display()

    # Dequeue elements
    q.dequeue()
    q.dequeue()

    print("After two node deletions")

    # Print queue elements
    q.display()

    print("After one insertion")
    q.enqueue(60)

    # Print queue elements
    q.display()

    # Print front of the queue
    q.front_element()